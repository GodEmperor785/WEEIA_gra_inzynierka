<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GAME_connection</name>
    </assembly>
    <members>
        <member name="M:GAME_connection.GameEnumUtils.GetRarityName(GAME_connection.Rarity)">
            <summary>
            should be used to get string name of given <see cref="T:GAME_connection.Rarity"/> enum. Use like: string x = Rarity.COMMON.GetRarityName();
            </summary>
            <param name="rarity"></param>
            <returns></returns>
        </member>
        <member name="M:GAME_connection.GameEnumUtils.GetWeaponTypeyName(GAME_connection.WeaponType)">
            <summary>
            should be used to get string name of given <see cref="T:GAME_connection.WeaponType"/> enum. Use like: string x = WeaponType.KINETIC.GetWeaponTypeyName();
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:GAME_connection.GameEnumUtils.GetDefenceSystemType(GAME_connection.DefenceSystemType)">
            <summary>
            should be used to get string name of given <see cref="T:GAME_connection.DefenceSystemType"/> enum. Use like: string x = DefenceSystemType.SHIELD.GetDefenceSystemType();
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:GAME_connection.GameEnumUtils.GetValues``1">
            <summary>
            returns list af all values of given enum. Use like: GameEnumUtils.GetValues&lt;Rarity&gt;()
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:GAME_connection.BaseModifiers">
            <summary>
            Used to send base modifiers to client (to calculate actual modifiers)
            </summary>
        </member>
        <member name="M:GAME_connection.CustomGameRoom.#ctor(System.String)">
            <summary>
            use to join openFoprAll rooms
            </summary>
            <param name="roomName"></param>
        </member>
        <member name="M:GAME_connection.CustomGameRoom.#ctor(System.String,System.String)">
            <summary>
            use to join room with a password
            </summary>
            <param name="roomName"></param>
            <param name="password"></param>
        </member>
        <member name="M:GAME_connection.CustomGameRoom.#ctor(System.String,System.String,System.Boolean,System.String)">
            <summary>
            use to create new game room
            </summary>
            <param name="roomName"></param>
            <param name="password"></param>
            <param name="openForAll"></param>
            <param name="creatorsUserName"></param>
        </member>
        <member name="M:GAME_connection.CustomGameRoom.#ctor(GAME_connection.CustomGameRoom)">
            <summary>
            used by server, unsets password
            </summary>
            <param name="room"></param>
        </member>
        <member name="P:GAME_connection.ConnectionEndedException.Orign">
            <summary>
            should specify whether exception occured on send or receive
            </summary>
        </member>
        <member name="T:GAME_connection.OperationsMap">
            <summary>
            Maps  <see cref="T:GAME_connection.OperationType"/> to <see cref="T:System.Type"/> (class) of <see cref="P:GAME_connection.GamePacket.Packet"/> in <see cref="T:GAME_connection.GamePacket"/> object
            </summary>
        </member>
        <member name="M:GAME_connection.SslUtils.ValidateServerCertificateNoImport(System.Object,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
            <summary>
            compares received certificate public key with known public key of server. Does not require importing servers certificate to trusted root certificates via MMC
            </summary>
            <param name="sender"></param>
            <param name="certificate"></param>
            <param name="chain"></param>
            <param name="sslPolicyErrors"></param>
            <returns></returns>
        </member>
        <member name="M:GAME_connection.SslUtils.ValidateServerCertificateWithTrustedRootCertificateCheck(System.Object,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
            <summary>
            Checks validity of received server certificate, requires the client to import server certificate to trusted root certificates via MMC
            </summary>
            <param name="sender"></param>
            <param name="certificate"></param>
            <param name="chain"></param>
            <param name="sslPolicyErrors"></param>
            <returns></returns>
        </member>
        <member name="T:GAME_connection.TcpConnection">
            <summary>
            Class used to send and receive GamePackets between server and client.
            <para>Should be used instead of TcpClient and its NetworkStream, if you need to have same connection in multiple places PASS instance of this object, DON'T create new object.</para>
            <para>All send and receive operations are synchronized separately (one lock for send and one for receive)</para>
            <para>Receive operations are preformed on separate thread to allow constant connection testing</para>
            <para>To disconnect from remote use <see cref="M:GAME_connection.TcpConnection.SendDisconnect"/>. To process remote disconnect use <see cref="M:GAME_connection.TcpConnection.Disconnect"/></para>
            </summary>
        </member>
        <member name="E:GAME_connection.TcpConnection.ConnectionEnded">
            <summary>
            this event is used when sudden disconnect has taken place - disconnect that was not planned by client sending <see cref="F:GAME_connection.OperationType.DISCONNECT"/> message to server
            </summary>
        </member>
        <member name="M:GAME_connection.TcpConnection.#ctor(System.Net.Sockets.TcpClient,System.Boolean,GAME_connection.TcpConnection.Logger,System.Boolean,System.Boolean,System.String)">
            <summary>
            Creates all necessary variables and threads for game connection, requires connected <see cref="T:System.Net.Sockets.TcpClient"/>.
            </summary>
            <param name="client">connected <see cref="T:System.Net.Sockets.TcpClient"/></param>
            <param name="isClient">true if used on the client side - clients send  <see cref="F:GAME_connection.OperationType.CONNECTION_TEST"/> packets to server</param>
            <param name="logger">method to log messages in this object</param>
            <param name="printDebugInfo">prints debug info to console if <see langword="true"/></param>
            <param name="useSSL">if <see langword="true"/> uses <see cref="T:System.Net.Security.SslStream"/> instead of bare <see cref="T:System.Net.Sockets.NetworkStream"/>, defaults to <see langword="false"/></param>
            <param name="sslCertificatePath"> specifies path to .cer file containing servers certificate</param>
        </member>
        <member name="M:GAME_connection.TcpConnection.Send(GAME_connection.GamePacket)">
            <summary>
            Used to send <see cref="T:GAME_connection.GamePacket"/> to client specified in constructor (TcpClient)
            </summary>
            <param name="packet">instance of <see cref="T:GAME_connection.GamePacket"/> object to send</param>
        </member>
        <member name="M:GAME_connection.TcpConnection.GetReceivedPacket">
            <summary>
            Waits and gets oldest unprocessed received packet. Waits without timeout.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GAME_connection.TcpConnection.GetReceivedPacket(System.Int32)">
            <summary>
            Waits and gets oldest unprocessed received packet with timeout in miliseconds, on timeout returns null
            </summary>
            <param name="timeoutMilis">timeout in miliseconds for receive operation</param>
            <returns></returns>
        </member>
        <member name="M:GAME_connection.TcpConnection.DoReceiving">
            <summary>
            Main receiving thread, receives <see cref="T:GAME_connection.GamePacket"/>s and puts them on the queue, ignores <see cref="F:GAME_connection.OperationType.CONNECTION_TEST"/> packets
            </summary>
        </member>
        <member name="M:GAME_connection.TcpConnection.Receive">
            <summary>
            Used to receive <see cref="T:GAME_connection.GamePacket"/>s
            </summary>
            <returns>received (deserialized) GamePacket</returns>
        </member>
        <member name="M:GAME_connection.TcpConnection.DoTestConnection">
            <summary>
            Periodically tests connection, used on client
            </summary>
        </member>
        <member name="M:GAME_connection.TcpConnection.SendDisconnect">
            <summary>
            Use this method to send proper disconnect to remote. DO NOT send packet <see cref="F:GAME_connection.OperationType.CONNECTION_TEST"/> manually and call Dispose or Disconnect!
            </summary>
        </member>
        <member name="M:GAME_connection.TcpConnection.Disconnect">
            <summary>
            Use this method when you receive <see cref="F:GAME_connection.OperationType.CONNECTION_TEST"/> packet from remote. DO NOT use it when you want to SEND <see cref="F:GAME_connection.OperationType.CONNECTION_TEST"/>
            </summary>
        </member>
        <member name="M:GAME_connection.TcpConnection.Dispose">
            <summary>
            called internally by proper <see cref="M:GAME_connection.TcpConnection.Disconnect"/> and <see cref="M:GAME_connection.TcpConnection.SendDisconnect"/>. SHOULDN'T be used manually!
            </summary>
        </member>
    </members>
</doc>
